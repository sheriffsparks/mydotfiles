#!/usr/bin/env bash
logfile=`date +"%H-%M-%S_%d-%m-%Y"`.install.log
mkfifo ${logfile}.pipe
tee < ${logfile}.pipe $logfile &
exec &> ${logfile}.pipe
rm ${logfile}.pipe

function check_git {
	print_info "Git fetching"
	git fetch &>> $logfile
	if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]
	then
		print_warn "Repo not up to date with remote"
		prompt_yesno "Update?"
		if [[ $? -eq 0 ]]
		then
			git pull
			check_return "git pull"
		else
			print_warn "Continuing with out updating"
		fi
	else
		print_info "Repo up to date"
	fi
}


function print_error {
	printf "\033[1;31m[!]\033[0m %s\n" "$1"
	exit -1
}
function print_warn {
	printf "\033[1;33m[-]\033[0m %s\n" "$1"
}
function print_good {
	printf "\033[1;32m[+]\033[0m %s\n" "$1"
}
function print_info {
	printf "\033[1;34m[*]\033[0m %s\n" "$1"
}

function check_installed {
	installed=$(dpkg-query -W -f'${Status}' "$1" 2>/dev/null | grep "install ok installed")
	if [[ "" == "$installed" ]]
	then
		return -1
	fi
	return 0
}
function check_return {
	if [[ $? -ne 0 ]]
	then
		print_error "$1 failed"
	else
		print_good "$1 succeded"
	fi
}
function install_package {
	pkg=$1
	check_installed $pkg
	if [[ $? -ne 0 ]]
	then
		print_info "$pkg not installed. Installing..." 
		sudo apt -y install $pkg &>> $logfile
		check_return "$pkg install"
	fi
	print_good "$pkg installed"
}
function prompt_yesno {
	while read -p "$1 [y/n]: " result && [[ $result != 'y' ]] && [[ $result != 'n' ]]
	do
		print_warn "Input not understood"
	done
	if [[ $result == 'y' ]]
	then
		return 0
	else
		return 1
	fi
}

function check_config {
	if [[ ! -f "$2" ]]
	then
		return -1
	else
		wanted_path=$PWD/"$1"
		real_path=`realpath $2`
		if [[ "$wanted_path" != "$real_path" ]]
		then
			print_warn "$2 exists but does not match $1"
			prompt_yesno "Replace?"
			if [[ $? -eq 0 ]]
			then
				return -1
			else
				print_error "Exiting"
			fi
		fi
	fi
	return 0
}

function place_config {
	check_config "$1" "$2"
	if [[ $? -eq 0 ]]
	then
		print_info "$2 already linked"
	else
		ln -sf $PWD/"$1" "$2" &>> $logfile
		check_return "Placing $1"
	fi
}
function check_dir {
	if [[ ! -d $1 ]]
	then
		return -1
	else
		return 0
	fi
}
function check_file {
	if [[ ! -f $1 ]]
	then
		return -1
	else
		return 0
	fi
}

PWD=`pwd`
check_git

#-----------------------
#  PACKAGE INSTALL
#-----------------------
install_package vim
install_package tmux
install_package gdb

#-----------------------
#  CONFIG INSTALLS
#-----------------------
place_config vimrc ~/.vimrc
place_config tmux.conf ~/.tmux.conf
place_config gdbinit ~/.gdbinit

#-----------------------
#  VIM PLUGINS
#-----------------------
check_file ~/.vim/autoload/pathogen.vim
if [[ $? -ne 0 ]]
then
	print_info "Installing Vim Pathogen"
	mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim &>> $logfile
	check_return "Vim Pathogen install"
else
	print_info "VIM Pathogen already installed"
fi
check_dir ~/.vim/bundle/vim-tmux-focus-events
if [[ $? -ne 0 ]]
then
	print_info "Installing Vim-tmux-focus-events"
	git clone git://github.com/tmux-plugins/vim-tmux-focus-events.git ~/.vim/bundle/vim-tmux-focus-events &>> $logfile
	check_return "Vim-tmux-focus-events install"
else
	print_info "Vim-tmux-focus-events install"
fi


#-----------------------
#  TMUX PLUGIN MANAGER
#-----------------------
check_dir ~/.tmux/plugins/tpm
if [[ $? -ne 0 ]]
then
	print_info "Intalling TPM"
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm &>> $logfile
else
	print_info "TPM already installed"
fi
