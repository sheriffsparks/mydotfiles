#!/usr/bin/env bash

loggy=$(date +"%H-%M-%S_%d-%m-%Y").log
exec > >(tee -ia ${loggy})
exec 2> >(tee -ia ${loggy} >& 2)
exec {FD}> ${loggy}
export BASH_XTRACEFD=${FD}
set -Eeoux pipefail

logfile=$(date +"%H-%M-%S_%d-%m-%Y").install.log
mkfifo "${logfile}".pipe
tee < "${logfile}".pipe "$logfile" &
exec &> "${logfile}".pipe
rm "${logfile}".pipe

function internet_check {
#	if [[ $? -eq 0 ]]
	if wget -q --spider https://github.com;
	then
		return 0
	else
		print_warn "Cannot not reach github. Not checking for new version"
		return 1
	fi
}

function check_git {
	git fetch &>> "$logfile"
    if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]] && ret=$(git status | grep -c ahead) && [[ $ret -eq 0 ]]
	then
		print_warn "Repo not up to date with remote"
		if prompt_yesno "Update?";
		then
			git pull &>> "$logfile"
			check_return "git pull"
			print_error "Quiting so you can rerun with new version"
		else
			print_warn "Continuing with out updating"
		fi
	else
		print_info "Repo up to date"
	fi
}

function print_error {
	printf "\\033[1;31m[!]\\033[0m %s\\n" "$1"
	exit -1
}

function print_warn {
	printf "\\033[1;33m[-]\\033[0m %s\\n" "$1"
}

function print_good {
	printf "\\033[1;32m[+]\\033[0m %s\\n" "$1"
}

function print_info {
	printf "\\033[1;34m[*]\\033[0m %s\\n" "$1"
}

function check_installed {
	installed=$(dpkg-query -W -f'${Status}' "$1" 2>/dev/null | grep "install ok installed")
	if [[ "" == "$installed" ]]
	then
		return 0
	fi
	return 1
}

function check_return {
	if [[ $? -ne 0 ]]
	then
		print_error "$1 failed"
	else
		print_good "$1 succeded"
	fi
}

function install_package {
	pkg=$1
	if check_installed "$pkg";
	then
		print_info "$pkg not installed. Installing..." 
		sudo apt -y install "$pkg" &>> "$logfile"
		check_return "$pkg install"
	fi
	print_info "$pkg installed"
}

function prompt_yesno {
	while read -rp "$1 [y/n]: " result && [[ $result != 'y' ]] && [[ $result != 'n' ]]
	do
		print_warn "Input not understood"
	done
	if [[ $result == 'y' ]]
	then
		return 0
	else
		return 1
	fi
}

function check_config {
	if [[ ! -f "$2" ]]
	then
		return 1
	else
		wanted_path=$PWD/"$1"
        real_path=$(realpath "$2")
		if [[ "$wanted_path" != "$real_path" ]]
		then
			print_warn "$2 exists but does not match $1"
			if prompt_yesno "Replace?"
			then
				return 1
			else
				print_error "Exiting!"
			fi
		fi
	fi
	return 0
}

function place_config {
	if check_config "$1" "$2";
	then
		print_info "$2 already linked"
	else
		ln -sf "$PWD"/"$1" "$2" &>> "$logfile"
		check_return "Placing $1"
	fi
}

function check_dir {
	if [[ -d $1 ]]
	then
		return 1
	else
		return 0
	fi
}

function check_file {
	if [[ ! -f $1 ]]
	then
		return 0
	else
		return 1
	fi
}

function install_vim_plugin {
    repo=$(echo "$1" | rev | cut -d '/' -f1 | rev | cut -d '.' -f1)
	if check_dir ~/.vim/bundle/"$repo";
	then
		print_info "Installing $repo"
		git clone "$1" ~/.vim/bundle/"$repo" &>> "$logfile"
		check_return "$repo install"
	else
		print_info "$repo already installed"
	fi
}

function vim_plugins {
	while read -r plugin
	do
		install_vim_plugin "$plugin"
	done < "$VIMPLUGINS"
}

#-----------------------
#  SETUP
#-----------------------
PWD=$(pwd)
VIMPLUGINS=vim/vimplugins
if internet_check;
then
	check_git
fi

#-----------------------
#  PACKAGE INSTALL
#-----------------------
install_package curl
install_package vim
install_package tmux
install_package gdb

#-----------------------
#  CONFIG INSTALLS
#-----------------------
place_config vim/vimrc ~/.vimrc
place_config tmux.conf ~/.tmux.conf
place_config gdbinit ~/.gdbinit

#-----------------------
#  VIM PLUGINS
#-----------------------
if check_file ~/.vim/autoload/pathogen.vim;
then
	print_info "Installing Vim Pathogen"
	mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim &>> "$logfile"
	check_return "Vim Pathogen install"
else
	print_info "VIM Pathogen already installed"
fi

if [[ ! -f ${VIMPLUGINS} ]]
then
	print_warn "No vimplugins file found"
else
	vim_plugins
fi

#-----------------------
#  TMUX PLUGIN MANAGER
#-----------------------
if check_dir ~/.tmux/plugins/tpm;
then
	print_info "Intalling TPM"
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm &>> "$logfile"
else
	print_info "TPM already installed"
fi

#-----------------------
#  SSH 
#-----------------------
place_config ssh/config ~/.ssh/config

printf "\n\\033[5m"
print_info "Remember to install tmux plugins with prefix+I if new ones installed"
printf "\n"
